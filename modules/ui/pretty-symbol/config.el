;;; ui/pretty-symbol/config.el -*- lexical-binding: t; -*-

(def-package! pretty-mode
  :config
  (global-pretty-mode t)
  (global-prettify-symbols-mode 1)

  (pretty-deactivate-groups
   '(:equality :ordering :ordering-double :ordering-triple
               :arrows :arrows-twoheaded :punctuation
               :logic :sets))

  (pretty-activate-groups
   '(:sub-and-superscripts :greek :arithmetic-nary))

  (add-hook
   'python-mode-hook
   (lambda ()
     (setq prettify-symbols-alist
           '(;; Syntax
             ("def" . 402)
             ("not" . 10071)
             ("in" . 8712)
             ("not in" . 8713)
             ("return" . 10236)
             ("yield" . 10235)
             ("for" . 8704)
             ;; Base Types
             ("int" . 8484)
             ("float" . 8477)
             ("str" . 120138)
             ("True" . 120139)
             ("False" . 120125)
             ;; Mypy
             ("Dict" . 120071)
             ("List" . 8466)
             ("Tuple" . 10754)
             ("Set" . 8486)
             ("Iterable" . 120074)
             ("Any" . 10068)
             ("Union" . 8899)))))

  (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(57600 . 57711) "Fira Code Symbol")))
  (set-fontset-font t '(57600 . 57711) "Fira Code Symbol")

  (defconst fira-code-font-lock-keywords-alist
    (mapcar (lambda (regex-char-pair)
              `(,(car regex-char-pair)
                (0 (prog1 ()
                     (compose-region (match-beginning 1)
                                     (match-end 1)
                                     ;; The first argument to concat is a string containing a literal tab
                                     ,(concat "	" (list (decode-char 'ucs (cadr regex-char-pair)))))))))
            '(("\\(www\\)" 57600)
              ("[^/]\\(\\*\\*\\)[^/]" 57601)
              ("\\(\\*\\*\\*\\)" 57602)
              ("\\(\\*\\*/\\)" 57603)
              ("\\(\\*>\\)" 57604)
              ("[^*]\\(\\*/\\)" 57605)
              ("\\(\\\\\\\\\\)" 57606)
              ("\\(\\\\\\\\\\\\\\)" 57607)
              ("\\({-\\)" 57608)
              ("\\(\\[\\]\\)" 57609)
              ("\\(::\\)" 57610)
              ("\\(:::\\)" 57611)
              ("[^=]\\(:=\\)" 57612)
              ("\\(!!\\)" 57613)
              ("\\(!=\\)" 57614)
              ("\\(!==\\)" 57615)
              ("\\(-}\\)" 57616)
              ("\\(--\\)" 57617)
              ("\\(---\\)" 57618)
              ("\\(-->\\)" 57619)
              ("[^-]\\(->\\)" 57620)
              ("\\(->>\\)" 57621)
              ("\\(-<\\)" 57622)
              ("\\(-<<\\)" 57623)
              ("\\(-~\\)" 57624)
              ("\\(#{\\)" 57625)
              ("\\(#\\[\\)" 57626)
              ("\\(##\\)" 57627)
              ("\\(###\\)" 57628)
              ("\\(####\\)" 57629)
              ("\\(#(\\)" 57630)
              ("\\(#\\?\\)" 57631)
              ("\\(#_\\)" 57632)
              ("\\((ly-raw clojure-reader-comment (\\))" 57633)
              ("\\(\\.-\\)" 57634)
              ("\\(\\.=\\)" 57635)
              ("\\(\\.\\.\\)" 57636)
              ("\\(\\.\\.<\\)" 57637)
              ("\\(\\.\\.\\.\\)" 57638)
              ("\\(\\?=\\)" 57639)
              ("\\(\\?\\?\\)" 57640)
              ("\\(;;\\)" 57641)
              ("\\(/\\*\\)" 57642)
              ("\\(/\\*\\*\\)" 57643)
              ("\\(/=\\)" 57644)
              ("\\(/==\\)" 57645)
              ("\\(/>\\)" 57646)
              ("\\(//\\)" 57647)
              ("\\(///\\)" 57648)
              ("\\(&&\\)" 57649)
              ("\\(||\\)" 57650)
              ("\\(||=\\)" 57651)
              ("[^|]\\(|=\\)" 57652)
              ("\\(|>\\)" 57653)
              ("\\(\\^=\\)" 57654)
              ("\\(\\$>\\)" 57655)
              ("\\(\\+\\+\\)" 57656)
              ("\\(\\+\\+\\+\\)" 57657)
              ("\\(\\+>\\)" 57658)
              ("\\(=:=\\)" 57659)
              ("[^!/]\\(==\\)[^>]" 57660)
              ("\\(===\\)" 57661)
              ("\\(==>\\)" 57662)
              ("[^=]\\(=>\\)" 57663)
              ("\\(=>>\\)" 57664)
              ("\\(<=\\)" 57665)
              ("\\(=<<\\)" 57666)
              ("\\(=/=\\)" 57667)
              ("\\(>-\\)" 57668)
              ("\\(>=\\)" 57669)
              ("\\(>=>\\)" 57670)
              ("[^-=]\\(>>\\)" 57671)
              ("\\(>>-\\)" 57672)
              ("\\(>>=\\)" 57673)
              ("\\(>>>\\)" 57674)
              ("\\(<\\*\\)" 57675)
              ("\\(<\\*>\\)" 57676)
              ("\\(<|\\)" 57677)
              ("\\(<|>\\)" 57678)
              ("\\(<\\$\\)" 57679)
              ("\\(<\\$>\\)" 57680)
              ("\\(<!--\\)" 57681)
              ("\\(<-\\)" 57682)
              ("\\(<--\\)" 57683)
              ("\\(<->\\)" 57684)
              ("\\(<\\+\\)" 57685)
              ("\\(<\\+>\\)" 57686)
              ("\\(<=\\)" 57687)
              ("\\(<==\\)" 57688)
              ("\\(<=>\\)" 57689)
              ("\\(<=<\\)" 57690)
              ("\\(<>\\)" 57691)
              ("[^-=]\\(<<\\)" 57692)
              ("\\(<<-\\)" 57693)
              ("\\(<<=\\)" 57694)
              ("\\(<<<\\)" 57695)
              ("\\(<~\\)" 57696)
              ("\\(<~~\\)" 57697)
              ("\\(</\\)" 57698)
              ("\\(</>\\)" 57699)
              ("\\(~@\\)" 57700)
              ("\\(~-\\)" 57701)
              ("\\(~=\\)" 57702)
              ("\\(~>\\)" 57703)
              ("[^<]\\(~~\\)" 57704)
              ("\\(~~>\\)" 57705)
              ("\\(%%\\)" 57706)
              ;; ("\\(x\\)"                   #Xe16b) This ended up being hard to do properly so i'm leaving it out.
              ("[^:=]\\(:\\)[^:=]" 57708)
              ("[^\\+<>]\\(\\+\\)[^\\+<>]" 57709)
              ("[^\\*/<>]\\(\\*\\)[^\\*/<>]" 57711))))

  (defun add-fira-code-symbol-keywords ()
    (font-lock-add-keywords nil fira-code-font-lock-keywords-alist))

  (add-hook 'prog-mode-hook #'add-fira-code-symbol-keywords))


